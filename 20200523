1.字典：
    字典的键必须不可变，如数字/字符串/元组，且唯一,如有重复，键会被赋予最后一个值
    修改或增加，方法一样：dict[key] = value
    删除：del dict[]
         dict.clear()
         del dict
    复制：两种浅拷贝，第一种两个dict的id相同，第二种id不同，但注意第二种内部的子对象也是引用，所以会随原dict的子对象改变
        dict1 = {1:454, 2:564, 3:'fsadf', 4:[4,5,3]}
        dict2 = dict1
        dict3 = dict1.copy()
        dict1[1] = 888
        dict1[4].pop()
        print(dict1, '\n', dict2, '\n', dict3)
        >>>{1: 888, 2: 564, 3: 'fsadf', 4: [4, 5]} 
           {1: 888, 2: 564, 3: 'fsadf', 4: [4, 5]} 
           {1: 454, 2: 564, 3: 'fsadf', 4: [4, 5]}
        深拷贝需引入copy模块，使用copy.deepcopy()方法
2.集合：
     集合的元素无序且唯一（实际上全int时就是有序的，因为python中int类型的内存地址固定）
     初始化集合时，如果为空，必须用a = set(), 否则a = {},得到的是一个字典
      s.clear()
      x in s
      s.add(x)，x作为一个整体加入s
      s.update(x), 如果x为str/list/tuple，将x拆分成单独的元素加入s
      s.remove()/discard() 如果元素不存在，discard不会报错
      s.pop() 随机移除一个元素
      a = set(('apple'))
      >>>a == {'a', 'p', 'l', 'e'}
      a = set(('apple',))
      >>>a == {'apple'}
      s.sort() 排序，字符串按首字母和长度排序
3.函数：
      str/tuple/num为不可更改对象，list/dict等可修改，作为参数会造成如下问题：
      函数输入参数包含列表，且规定了默认值时，如果不输入列表参数，每次调用时会复用同一个列表，即第二次调用时，此默认列表可能不为默认值
      解决方案：def fun(L=[]):
                  if not L: #判断L是否为空
                      L = []
       关键字参数
       默认参数 比如放在非默认参数后
       不定长参数：*var, 以tuple形式传入
                  **var, 以字典形式传入
       强制关键字参数 a, b, *, c, d  单独的*之后的参数必须以关键字参数的形式传入c = 3, d =4
       匿名函数 lambda arg1,arg2,...: expression
       例: sum = lambda arg1, arg2: arg1 + arg2
       强制位置参数 a, b, / a 和 b必须为位置参数，即不可出现a = 2, b = 3这种传入参数的方式
       
       函数可以访问全局变量，但不能修改它
       函数查找参数按局部-->局部外的局部(如函数内)-->全局-->内建的顺序，先找到哪个，就用哪个
       函数可以返回多个值，以元组的方式
       装饰器
       
